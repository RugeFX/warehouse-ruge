generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Position {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  staff     Staff[]
  privilege Privilege[]
}

model MenuGroup {
  id        Int        @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menuItem  MenuItem[]
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  icon        String
  url         String
  menuGroupId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  menuGroup   MenuGroup   @relation(fields: [menuGroupId], references: [id])
  privilege   Privilege[]
}

model Privilege {
  id         Int      @id @default(autoincrement())
  view       Int
  add        Int
  edit       Int
  delete     Int
  menuItemId Int
  positionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
}

model Staff {
  id           Int      @id @default(autoincrement())
  positionId   Int
  name         String   @unique
  registerDate DateTime
  address      String
  phone        String
  image        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  position     Position @relation(fields: [positionId], references: [id])
  user         User?
}

model Supplier {
  id           Int      @id @default(autoincrement())
  idSupplier   String   @default(uuid())
  name         String   @unique
  registerDate DateTime
  address      String
  phone        String
  image        String
  information  String
  product      Product[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  staffId  Int    @unique
  staff    Staff  @relation(fields: [staffId], references: [id])
}

model Category {
  id           Int      @id @default(autoincrement())
  itemType     String   
  product      Product[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Unit {
  id           Int    @id @default(autoincrement())
  unitName     String
  shortName    String
  product      Product[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id           Int      @id @default(autoincrement())
  kodeProduct  String   @default(uuid())
  name         String   @unique
  stock        Int
  netPrice     Int
  image        String
  information  String
  unitId       Int
  unit         Unit     @relation(fields: [unitId], references: [id])
  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])
  supplierId   Int
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  restocks     ProductsOnRestock[]
}

model Restock {
  id           Int      @id @default(autoincrement())
  idRestock    String   @default(uuid())
  restockDate  DateTime
  supplierId   Int
  totalSpend   Int
  products     ProductsOnRestock[]
}

model ProductsOnRestock {
  productId    Int
  product      Product @relation(fields: [productId], references: [id],onDelete: Cascade)    
  restockId    Int
  restock      Restock @relation(fields: [restockId], references: [id],onDelete: Cascade)    
  quantity     Int
  @@id([productId, restockId])
}

model RefreshToken {
  id       Int      @id @default(autoincrement())
  token    String   @unique
  expireAt DateTime
}
